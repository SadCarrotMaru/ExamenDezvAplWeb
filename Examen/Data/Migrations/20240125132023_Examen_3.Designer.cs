// <auto-generated />
using System;
using Examen.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Migrations
{
    [DbContext(typeof(ExamenContext))]
    [Migration("20240125132023_Examen_3")]
    partial class Examen3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.Data.Models.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EdituraCarteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEditura")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocNastere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Varsta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EdituraCarteId");

                    b.ToTable("Autori");
                });

            modelBuilder.Entity("Examen.Data.Models.Carte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pret")
                        .HasColumnType("int");

                    b.Property<string>("Subiect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carti");
                });

            modelBuilder.Entity("Examen.Data.Models.Editura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vechime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Edituri");
                });

            modelBuilder.Entity("Examen.Data.Models.ModelsRelation", b =>
                {
                    b.Property<Guid>("AutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutorId", "CarteId");

                    b.HasIndex("CarteId");

                    b.ToTable("ModelsRelation");
                });

            modelBuilder.Entity("Examen.Data.Models.Autor", b =>
                {
                    b.HasOne("Examen.Data.Models.Editura", "EdituraCarte")
                        .WithMany("Autori")
                        .HasForeignKey("EdituraCarteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EdituraCarte");
                });

            modelBuilder.Entity("Examen.Data.Models.ModelsRelation", b =>
                {
                    b.HasOne("Examen.Data.Models.Autor", "Autor")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.Data.Models.Carte", "Carte")
                        .WithMany("ModelsRelations")
                        .HasForeignKey("CarteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Carte");
                });

            modelBuilder.Entity("Examen.Data.Models.Autor", b =>
                {
                    b.Navigation("ModelsRelations");
                });

            modelBuilder.Entity("Examen.Data.Models.Carte", b =>
                {
                    b.Navigation("ModelsRelations");
                });

            modelBuilder.Entity("Examen.Data.Models.Editura", b =>
                {
                    b.Navigation("Autori");
                });
#pragma warning restore 612, 618
        }
    }
}
